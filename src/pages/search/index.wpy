<template>
  <view class="login">
    <view class="header">
      <image src="" />
    </view>
    <view class="title">
      <text>微信登录</text>
    </view>
    <view class="info">
      <text>识别人脸打卡自主研发的打卡小程序，微信登录后不会造成信息泄漏，请放心登录。</text>
    </view>
    <view class="button">
      <button class="btn" hover-class="btn-hover" disabled="{{btnDis}}" @tap="handleLoginBtn">登录</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
// import { getToken, disable, checkToken } from '../../lib/util';
export default class extends wepy.page {
  data = {
    btnDis: false,
    delay: 10,
    time: null
  };

  components = {};

  methods = {
    switchPages(userType) {
      console.log(userType);
      switch (userType) {
        case 'manager':
          wx.switchTab({ url: '/pages/workers/workers' });
          break;
        case 'staff':
          wx.redirectTo({ url: '/pages/scan/scan?' });
          break;
        case 'user':
          wx.redirectTo({ url: '/pages/select/select' });
          break;
        default:
          break;
      }
    },

    //更新个人的userType
    updateUserType(cb) {
      wx.request({
        url: Api.userInfo + wx.getStorageSync('token'),
        method: 'GET',
        success: res => {
          console.log(res);
          if (res.statusCode == 200) {
            wx.setStorageSync('userType', res.data.types);
            typeof cb == 'function' && cb(res.data.types);
          }
        }
      });
    },

    //登录按钮处理函数
    handleLoginBtn() {
      wx.showToast({
        title: '登录中',
        icon: 'loading'
      });
      if (this.data.btnDis != true) {
        this.setData({
          btnDis: true
        });

        this.getToken(res => {
          console.log(res);
          //用户拒绝授权
          if (res.errMsg == 'userDenyed') {
            wx.redirectTo({
              url: '/pages/unAuth/unAuth'
            });
          }
          //用户允许授权
          else {
            wx.setStorageSync('userType', res.types);
            wx.setStorage({
              key: 'token',
              data: res.token,
              success: sssres => {
                this.switchPages(res.types);
              },
              fail: function() {
                console.error('存储token时失败');
              }
            });
          }
        });
        this.disable(1000, 3, backData => {
          if (backData == false)
            this.setData({
              btnDis: false
            });
          console.log('解除禁用');
        });
      }
    }
  };
  //获取code
  getCode(callback) {
    wx.login({
      success: function(res) {
        if (res.code) {
          typeof callback === 'function' && callback(res.code);
        } else {
          console.log('获取code失败！' + res.errMsg);
        }
      }
    });
  }
  // 获取access_token
  getToken(callback) {
    this.getCode(code => {
      wx.getUserInfo({
        success: function(res) {
          console.log('用户允许授权');
          wx.request({
            url: Api.session,
            data: {
              code: code,
              newteo: key.newteo,
              iv: res.iv,
              encryptedData: res.encryptedData
            },
            method: 'GET',
            success: function(res) {
              typeof callback == 'function' && callback(res.data);
            },
            fail: function() {
              console.log('wx.request 请求失败');
            }
          });
        },
        fail: function(res) {
          if (res.errMsg) {
            console.log('用户拒绝授权', res);
            typeof callback == 'function' && callback({ errMsg: 'userDenyed' });
          }
        }
      });
    });
  }

  //检查access_token
  checkToken(token, cb) {
    wx.request({
      url: Api.userInfo + token,
      data: {},
      method: 'GET',
      success: function(res) {
        // success
        if (res.statusCode == 200) {
          console.log('token有效');
          typeof cb == 'function' && cb('good');
        } else {
          console.log('token无效');
          typeof cb == 'function' && cb('invail');
        }
      }
    });
  }

  disable(seconds, total, callback) {
    if (total != '') this.delay = total;
    this.delay--;
    if (this.delay == 0) {
      this.delay = 10;
      clearTimeout(this.time);
      typeof callback == 'function' && callback(false);
      console.log('清除了定时器');
    } else {
      console.log('重开了定时器计时' + this.delay);
      this.time = setTimeout(() => {
        this.disable(seconds, '', callback);
      }, seconds);
    }
  }

  events = {};

  onShareAppMessage() {}

  async onShow() {}

  onLoad(options) {
    // 页面初始化 options为页面跳转所带来的参数
    // wx.clearStorageSync()
    //每次进入小程序都 设置token和userType
    var token = wx.getStorageSync('token');
    if (token && wx.getStorageSync('userType')) {
      this.checkToken(token, res => {
        if (res == 'invail') {
          wx.clearStorageSync();
        } else {
          if (res == 'good') {
            this.updateUserType(userType => {
              this.switchPages(userType);
            });
          }
        }
      });
    }
  }

  onUnload() {}
}
</script>

<style lang="scss">
@function rpx($px) {
  @return $px + rpx;
}

.page {
  background: #f3f9fe;
  position: absolute;
  top: 0;
  bottom: 0;
}

.login {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  width: 100%;

  .header {
    width: 100%;

    .header image {
      height: rpx(808);
      width: 100%;
    }
  }

  .title {
    line-height: rpx(130);
    font-size: 23px;
    color: #64b5f6;
  }

  .info {
    padding: 0 rpx(60);
    font-size: 13px;
    line-height: rpx(37);
    color: rgba(0, 0, 0, 0.27);
  }

  .button {
    margin: rpx(60) auto rpx(30) auto;
    width: 80%;

    .btn {
      background-color: #1976d2;
      color: #ffffff;
    }

    .btn-hover {
      background-color: #1976d2;
      opacity: 0.7;
    }
  }
}
</style>
